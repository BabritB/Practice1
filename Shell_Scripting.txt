
Tasks
-----
What is #!/bin/bash? can we write #!/bin/sh as well?
Write a Shell Script which prints I will complete #90DaysOofDevOps challenge
Write a Shell Script to take user input, input from arguments and print the variables.
Write an Example of If else in Shell Scripting by comparing 2 numbers

=========================================
Steps to write and execute a script:
*************************************

Open the terminal. Go to the directory where you want to create your script.
Create a file with .sh extension.
Write the script in the file using an editor.
Make the script executable with command chmod +x <fileName>.
Run the script using ./<fileName>.

=======================================

Shell Script Parameters
**************************
A bash shell script have parameters. These parameters start from $1 to $9.

When we pass arguments into the command line interface, a positional parameter is assigned to these arguments through the shell.

The first argument is assigned as $1, second argument is assigned as $2 and so on...

If there are more than 9 arguments, then tenth or onwards arguments can't be assigned as $10 or $11.

===========================================

Shell Scripting Sourcing a config file
****************************************

Many programs use external configuration files. Use of external configuration files prevents a user from making changes to a script. Config file is added with the help of source command.

If a script is shared in many users and every user need a different configuration file, then instead of changing the script each time simply include the config files.

Example:

We have two files, one is parent file (main.sh) and other is configuration file (config.sh). We have to source this configuration file into our parent file.
1> Script for config.sh :-
#!/bin/bash
user=babrit
id=1202


2> Script for main.sh  :-

#!/bin/bash
source config.sh

echo "This is user $user with userid $id"
------------------------------------------

Look at the above snapshot, we've included config.sh file with source command.

Note: We can also use ( . config.sh ) command instead of ( source config.sh ) .

Now on running main.sh file, config.sh file is included.

============================================================

If then Else
*************

The if then else condition loop states that if condition meets, output goes to if part otherwise it goes to else part.

The word fi represents if loop termination .

#!/bin/bash
echo "Enter your Age : "
read age

if [ "$age" -ge 18]; then 
	echo "You are eligible to vote"

else
	echo "You are not eligible"

fi

remember fi concept is very must required as we do need to know where the read is ending.
================================================================

Shell Scripting if then elif
A new if can be nested inside an elif.

Syntax:

Syntax of if then elif is shown in the snapshot below,

-------------------------------------------------------------
#!/bin/bash

if [ condition 1 ]
then
	echo "Condidtion 1"
elif [ condition 2 ]
then
	echo "Condtition 2"

else
	echco "Else condition"

fi
-----------------------------------------------------------------


Shell Scripting for loop
****************************

Syntax of for loop using in and list of values is shown below. This for loop contains a number of variables in the list and will execute for each item in the list. For example, if there are 10 variables in the list, then loop will execute ten times and value will be stored in varname.
----------------------

for varname in list
do
	echo "Statement"
done

----------------------
Keywords are for, in, do, done
List is a list of variables which are separated by spaces. If list is not mentioned in the for statement, then it takes the positional parameter value that were passed into the shell.
Varname is any variable assumed by the user.
----------------------

Example
########

#!/bin/bash

for table in {2..20..2}
	do
		echo "table for 2 : $table"
done

-------------------------
C-Styled for loops
#######################
#!/bin/bash

VAR1=$1
VAR2=$2

n=7
for (( i=$1 ; i<=$2 ; i++ ));
do
    rmdir $i
    echo "Dir Deleted"
done

----------------------------


User Management in Linux
**************************

In a single directory, we can create 60,000 users. Now we will discuss the important commands to manage users in Linux. 

1. To list out all the users in Linux, use the awk command with -F option. Here, we are accessing a file and printing only first column with the help of print $1 and awk.

awk -F':' '{ print $1}' /etc/passwd


-----------------------------------------------------

2. Using id command, you can get the ID of any username. Every user has an id assigned to it and the user is identified with the help of this id. By default, this id is also the group id of the user.  

id username

Example: id test 

----------------------------------------------------

3. The command to add a user. useradd command adds a new user to the directory. The user is given the ID automatically depending on which category it falls in. The username of the user will be as provided by us in the command. 

sudo useradd username

Example: sudo useradd geeks  


-----------------------------------------------

4. Using passwd command to assign a password to a user. After using this command we have to enter the new password for the user and then the password gets updated to the new password.  

passwd username

Example: passwd geeks  

--------------------------------------------

5. Accessing a user configuration file.  

cat /etc/passwd
This commands prints the data of the configuration file. This file contains information about the user in the format.  

username : x : user id : user group id : : /home/username : /bin/bash 

--------------------------------------------

Now we will go through the commands to modify information. 

6. The command to change the user ID for a user.  

usermod  -u new_id username
This command can change the user ID of a user. The user with the given username will be assigned with the new ID given in the command and the old ID will be removed. 

Example: sudo usermod -u 1982 test  

------------------------------------------

7. Command to Modify the group ID of a user.  

usermod -g  new_group_id username
This command can change the group ID of a user and hence it can even be used to move a user to an already existing group. It will change the group ID of the user whose username is given and sets the group ID as the given new_group_id. 

Example: sudo usermod -g 1005 test  

---------------------------------------	

8. You can change the user login name using usermod command. The below command is used to change the login name of the user. The old login name of the user is changed to the new login name provided.  

sudo usermod -l new_login_name old_login_name
Example: sudo usermod -c John_Wick John_Doe  

--------------------------------------

9. The command to change the home directory. The below command change the home directory of the user whose username is given and sets the new home directory as the directory whose path is provided.  

usermod -d new_home_directory_path username
Example: usermod -d new_home_directory test  

---------------------------------------

10. You can also delete a user name. The below command deletes the user whose username is provided. Make sure that the user is not part of a group. If the user is part of a group then it will not be deleted directly, hence we will have to first remove him from the group and then we can delete him.  

userdel -r username
Example: sudo userdel -r new_geeks  

*******************************************************




